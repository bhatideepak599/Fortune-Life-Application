package com.techlabs.app.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.techlabs.app.dto.CustomerDto;
import com.techlabs.app.dto.InsurancePolicyDto;
import com.techlabs.app.dto.UserDto;
import com.techlabs.app.service.CustomerService;
import com.techlabs.app.util.PageResponse;

import io.swagger.v3.oas.annotations.Operation;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/fortuneLife/customer")
public class CustomerController {
	private static final Logger logger = LoggerFactory.getLogger(CustomerController.class);
	@Autowired
	private CustomerService customerService;

	@Operation(summary = "Add A New Customer ")
	@PostMapping
	public ResponseEntity<CustomerDto> addCustomer(@Valid @RequestBody UserDto userDto,
			@RequestParam(name = "role") String name) {
		logger.info("Adding A New Customer");
		String role = "ROLE_" + name.toUpperCase();
		CustomerDto customerDto = customerService.addCustomer(userDto, role);

		return new ResponseEntity<>(customerDto, HttpStatus.OK);
	}

	@Operation(summary = "Get All Customer based on Search Criteria")
	@GetMapping()
	public ResponseEntity<PageResponse<CustomerDto>> getAllCustomers(@RequestParam(required = false) Long id,
			@RequestParam(required = false) String userName, @RequestParam(required = false) String name,
			@RequestParam(required = false) String mobileNumber, @RequestParam(required = false) String email,
			@RequestParam(required = false) Boolean active, @RequestParam(required = false) Boolean verified,
			@RequestParam(name = "page", defaultValue = "0") int page,
			@RequestParam(name = "size", defaultValue = "10") int size) {
		logger.info("Fetching All The Customers");
		PageResponse<CustomerDto> customers = customerService.getAllCustomers(id, userName, name, mobileNumber, email,
				active,verified, page, size);

		return new ResponseEntity<>(customers, HttpStatus.OK);
	}
	
	@Operation(summary = "Fetch Customer By Id")
	@GetMapping("/{id}")
	public ResponseEntity<CustomerDto> getCustomerById(@PathVariable("id") Long id) {
		logger.info("Fetching A Customer");
		CustomerDto customerDto =customerService.getCustomerById(id);
		return new ResponseEntity<>(customerDto, HttpStatus.OK);
	}
	
	@Operation(summary = "Update A  Customer")
	@PutMapping
	public ResponseEntity<CustomerDto> updateCustomer(@Valid @RequestBody UserDto userDto) {
		logger.info("Updating A Custome");
		CustomerDto customerDto =customerService.updateCustomer(userDto);
		return new ResponseEntity<>(customerDto, HttpStatus.OK);
	}
	
	@Operation(summary = "Activate A Customer")
	@PutMapping("/activate/{id}")
	public ResponseEntity<String> activateCustomer(@PathVariable("id") Long id) {
		logger.info("Activating A Customer");
		String activatedMessage =customerService.activateCustomer(id);
		return new ResponseEntity<>(activatedMessage, HttpStatus.OK);
	}
	@Operation(summary = "Delete Customer By Id")
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteCustomerById(@PathVariable("id") Long id) {
		logger.info("Deleting A Customer with Customer Id");
		String message = customerService.deleteCustomerById(id);

		return new ResponseEntity<>(message, HttpStatus.OK);
	}
	
	
	
	// Add A Policy for the customer 
	@Operation(summary = "Add New  Policy to the Customer ")
	@PostMapping("/{customerId}/Insurance-Scheme/{schemeId}/policy")
	public ResponseEntity<InsurancePolicyDto> addNewPolicy(PolicyDto ){}

}
